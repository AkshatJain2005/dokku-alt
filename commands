#!/bin/bash
#set -e;

APP=$2

OLDHOME=$HOME
HOME="$DOKKU_ROOT/.mongodb"

check_exists() {
  if [[ ! -d "$DOKKU_ROOT/$APP" ]]; then
    echo "App must exist before creating mongodb storage for it"
    exit 1
  fi
}

check_app() {
  if [[ -z "$APP" ]]; then
    echo "You must specify an app name"
    exit 1
  fi
}

check_container() {
  if [[ -z "$id" ]]; then
    echo "MongoDB container not started cannot continue. Start with dokku mongodb:start"
    exit 1
  fi
}

set_dokku_env() {
  env_path=$1
  env_var=$2
  env_val=$3
  ex -s -c "g/export ${env_var}=/d" -c "x" "$env_path"
  echo "export ${env_var}=\"${env_val}\"" >> "$env_path"
}

clear_dokku_env() {
  local ref=$1[@]
  for x in ${!ref}; do
    ex -sc "g/${env_var}/d" -c "x" "$DOKKU_ROOT/$APP/ENV"
  done
}

admin_pass=$(cat "$DOKKU_ROOT/.mongodb/admin_pw")
mongodb_database="${APP}-production"

db_image="jeffutter/mongodb"
id=$(docker ps | grep "$db_image":latest |  awk '{print $1}')
mongodb_ip=$(docker port ${id} 27017 | awk '{split($0,a,":"); print a[1]}')
mongodb_port=$(docker port ${id} 27017 | awk '{split($0,a,":"); print a[2]}')
if [[ $mongodb_ip = "0.0.0.0" ]]; then
  mongodb_ip=localhost
fi

case "$1" in
  mongodb:create)
    check_container
    check_app
    check_exists

    mongodb_password=$(openssl rand -base64 32|base64)
    echo $mongodb_password > "$DOKKU_ROOT/.mongodb/pass_${APP}"

    mongodb_username=$APP
    mongo $mongodb_ip:$mongodb_port/$mongodb_database --quiet -u admin -p"$admin_pass" --authenticationDatabase="admin" --eval "db.addUser(\"${mongodb_username}\", \"${mongodb_password}\")"

    mongodb_port=27017
    if [[ ! -f "$DOKKU_ROOT/$APP/ENV" ]]; then
      touch "$DOKKU_ROOT/$APP/ENV"
    fi
    set_dokku_env "$DOKKU_ROOT/$APP/ENV" MONGODB_DATABASE $mongodb_database
    set_dokku_env "$DOKKU_ROOT/$APP/ENV" MONGODB_PORT $mongodb_port
    set_dokku_env "$DOKKU_ROOT/$APP/ENV" MONGODB_USERNAME $mongodb_username
    set_dokku_env "$DOKKU_ROOT/$APP/ENV" MONGODB_PASSWORD $mongodb_password
    set_dokku_env "$DOKKU_ROOT/$APP/ENV" MONGO_URL "mongodb://${mongodb_username}:${mongodb_password}@${mongodb_ip}:${mongodb_port}/${mongodb_database}"
    chown dokku: "$DOKKU_ROOT/$APP/ENV"
    ;;
  mongodb:delete)
    check_container
    check_app
    check_exists

    mongo $mongodb_ip:$mongodb_port/$mongodb_database --quiet -u admin -p"$admin_pass" --authenticationDatabase="admin" --eval "printjson(db.dropDatabase())"

    if [[ ! -f "$DOKKU_ROOT/$APP/ENV" ]]; then
      touch "$DOKKU_ROOT/$APP/ENV"
    fi

    VARS=( "MONGODB_DATABASE" "MONGODB_USERNAME" "MONGODB_PASSWORD" "MONGODB_PORT"  "MONGO_URL")
    clear_dokku_env VARS

    chown dokku: "$DOKKU_ROOT/$APP/ENV"
    ;;
  mongodb:list)
    check_container
    mongo $mongodb_ip:$mongodb_port --quiet -u admin -p"$admin_pass" --authenticationDatabase="admin" --eval "printjson(db.adminCommand('listDatabases'));" | grep name | cut -d \" -f 4 |grep -v admin | grep -v test
    ;;
  mongodb:start)
    if [[ "$id" != "" ]]; then
      echo "MongoDB container already running with ID: ${id}"
    else
      docker run -p 27017:27017 -d -v "$DOKKU_ROOT/.mongodb/data":/tmp/mongo jeffutter/mongodb /usr/bin/mongod --dbpath=/tmp/mongo --auth
    fi
    ;;
  mongodb:stop)
    check_container
    mongo $mongodb_ip:$mongodb_port/admin --quiet -u admin -p"$admin_pass" --authenticationDatabase="admin" --eval "db.shutdownServer()"
    ;;
  mongodb:status)
    if [[ "$id" != "" ]]; then
      echo "MongoDB container running with ID: ${id}"
    else
      echo "MongoDB container not running"
    fi
    ;;
  help)
    cat && cat<<EOF
    mongodb:create <app> Create a Mongo database
    mongodb:delete <app> Delete specified Mongo database
    mongodb:start        Start the MongoDB docker container if it isn't running
    mongodb:stop         Stop the MongoDB docker container
    mongodb:status       Shows status of MongoDB
    mongodb:list         List all databases
EOF
    ;;
esac

HOME=$OLDHOME

cat
