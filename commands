#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == rabbitmq:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
    if [[ ! -d "$PLUGIN_PATH/link" ]]; then
        echo "Link plugin not found... Did you install it from https://github.com/rlaneve/dokku-link?"
        exit 1
    fi
    PLUGIN_NAME="rabbitmq"
    PLUGIN_ALIAS="broker"
    CONTAINER_NAME="${PLUGIN_NAME}_${APP}"
    HOST_DIR="$DOKKU_ROOT/.$PLUGIN_NAME/$APP"
    CONTAINER_IMAGE="jlachowski/rabbitmq"
    RABBITMQ_PORT=5672
    RABBITMQ_ADMIN_PORT=15672
fi

case "$1" in

  rabbitmq:create)
    # Check if Rabbitmq container is installed
    IMAGE=$(docker images | grep "$CONTAINER_IMAGE" |  awk '{print $3}')
    if [[ -z $IMAGE ]]; then
        echo "Rabbitmq image not found... Did you run 'dokku plugins-install' ?"
        exit 1
    fi
    if [[ ! -d "$HOST_DIR" ]]; then
        mkdir -p "$HOST_DIR"
    fi
    # Check if an existing storage volume exists
    if [[ -f "$HOST_DIR/volume-$APP" ]]; then
        VOLUME="`cat $HOST_DIR/volume-$APP`:/opt/rabbitmq"
        echo
        echo "-----> Reusing rabbitmq/$APP storage"
    else
        VOLUME="/opt/rabbitmq"
        # Generate random password for users
        RABBITMQ_PASSWORD=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c 16)
        echo $RABBITMQ_PASSWORD > "$HOST_DIR/pwd-$APP"
        chown dokku: "$HOST_DIR/pwd-$APP"
        chmod 700 "$HOST_DIR/pwd-$APP"
    fi
    # Stop existing container with the same persistent Rabbitmq
    ID=$(docker ps | grep "$CONTAINER_NAME" |  awk '{print $1}')
    if [[ ! -z "$ID" ]]; then
        docker stop $ID > /dev/null
    fi
    # Launch container
    ID=$(docker run -v $VOLUME -name=$CONTAINER_NAME -d $CONTAINER_IMAGE /usr/bin/start-rabbitmq.sh $RABBITMQ_PASSWORD)
    sleep 1
    # Rename persistent volume
    if [[ ! -f "$HOST_DIR/volume-$APP" ]]; then
        VOLUME_PATH=$(docker inspect $ID | grep /var/lib/docker/vfs/dir/ | awk '{print $2}' | sed -e's/"//g')
        if [[ -z $VOLUME_PATH ]]; then
            echo "Your docker version is too old, please update it"
            exit 1
        fi
        echo $VOLUME_PATH > "$HOST_DIR/volume-$APP"
    fi
    # Link to a potential existing app
    dokku rabbitmq:link $APP $APP
    echo
    echo "-----> Rabbitmq container created: $CONTAINER_NAME (using $CONTAINER_IMAGE)"
    sleep 1
    dokku rabbitmq:info $APP
    ;;

  rabbitmq:delete)
    # Stop the container
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    if [[ ! -z $ID ]]; then
        docker stop $ID > /dev/null
        docker rm $ID > /dev/null
    fi

    dokku link:delete "$APP" "$CONTAINER_NAME" "$PLUGIN_ALIAS"
    dokku config:unset "$APP" "BROKER_SCHEME" "BROKER_USERNAME" "BROKER_PASSWORD" "BROKER_PATH"

    # Remove persistent volume
    if [[ -f "$HOST_DIR/volume-$APP" ]]; then
        #TODO: fix access rights to be able to remove volume as dokku
        rm -rf $(cat $HOST_DIR/volume-$APP)
        rm -f "$HOST_DIR/volume-$APP"
    fi
    # Remove container root password
    if [[ -f "$HOST_DIR/pwd-$APP" ]]; then
        rm -f "$HOST_DIR/pwd-$APP"
    fi
    if [[ -d "$HOST_DIR" ]]; then
        rm -rf "$HOST_DIR"
    fi
    echo
    echo "-----> Rabbitmq container deleted: $RABBITMQ_IMAGE"
    ;;

  rabbitmq:info)
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    IP=$(docker inspect $ID | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
    DOCKER_GATEWAY=$(docker inspect $ID | grep Gateway | awk '{ print $2 }' | tr -d ',"')
    echo
    echo "       Host: $IP"
    echo "       Gateway: $DOCKER_GATEWAY"
    echo "       Secret AMQP port: $RABBITMQ_PORT"
    echo "       Secret ADMIN port: $RABBITMQ_ADMIN_PORT"
    echo
    ;;

  rabbitmq:link)
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a container name"
            exit 1
        fi
        CONTAINER_NAME="${PLUGIN_NAME}_$3"
        if [[ ! -f "$HOST_DIR/pwd-$3" ]]; then
            echo "Rabbitmq is not correctly initialized"
            exit 0
        fi
        ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
        #IP=$(docker inspect $ID | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
        RABBITMQ_PASSWORD=$(cat "$HOST_DIR/pwd-$3")

        dokku link:create "$APP" "$CONTAINER_NAME" "$PLUGIN_ALIAS"
        # Write BROKER_URL to app's ENV file using dokku command
        dokku config:set $APP "BROKER_SCHEME=amqp" "BROKER_USERNAME=admin" "BROKER_PASSWORD=$RABBITMQ_PASSWORD" "BROKER_PATH=//"
        echo
        echo "-----> $APP linked to $CONTAINER_NAME container"
    fi
    ;;

  rabbitmq:logs)
    ID=$(docker ps -a | grep "$CONTAINER_NAME" |  awk '{print $1}')
    docker logs $ID | tail -n 100
    ;;

  help)
    cat && cat<<EOF
    rabbitmq:create <app>           Create a Rabbitmq container
    rabbitmq:delete <app>           Delete specified Rabbitmq container
    rabbitmq:info <app>             Display container informations
    rabbitmq:link <app> <rabbit>    Link an app to a Rabbitmq container
    rabbitmq:logs <app>             Display last logs from Rabbitmq container
EOF
    ;;

esac
