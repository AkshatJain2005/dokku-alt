#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == rabbitmq:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
    RABBITMQ_PORT=5672
    RABBITMQ_ADMIN_PORT=15672
    RABBIT_HOME="$DOKKU_ROOT/.rabbitmq"
fi

case "$1" in

  rabbitmq:create)
    RABBITMQ_IMAGE=rabbitmq/$APP
    # Check if Rabbitmq container is installed
    IMAGE=$(docker images | grep "jlachowski/rabbitmq " |  awk '{print $3}')
    if [[ -z $IMAGE ]]; then
        echo "Rabbitmq image not found... Did you run 'dokku plugins-install' ?"
        exit 1
    fi
    if [[ ! -d "$RABBIT_HOME" ]]; then
        mkdir -p "$RABBIT_HOME"
    fi
    # Check if an existing storage volume exists
    if [[ -f "$RABBIT_HOME/volume-$APP" ]]; then
        VOLUME="`cat $RABBIT_HOME/volume-$APP`:/opt/rabbitmq"
        echo
        echo "-----> Reusing rabbitmq/$APP storage"
    else
        VOLUME="/opt/rabbitmq"
        # Generate random password for users
        RABBITMQ_PASSWORD=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c 16)
        echo $RABBITMQ_PASSWORD > "$RABBIT_HOME/pwd-$APP"
        chown dokku: "$RABBIT_HOME/pwd-$APP"
        chmod 700 "$RABBIT_HOME/pwd-$APP"
    fi
    # Stop existing container with the same persistent Rabbitmq
    ID=$(docker ps | grep "$RABBITMQ_IMAGE":latest |  awk '{print $1}')
    if [[ ! -z "$ID" ]]; then
        docker stop $ID > /dev/null
    fi
    # Fork Rabbitmq image
    ID=$(docker run -d jlachowski/rabbitmq exit 0)
    docker wait $ID > /dev/null
    IMAGE=$(docker commit $ID)
    docker tag $IMAGE $RABBITMQ_IMAGE
    # Launch container
    ID=$(docker run -v $VOLUME -p $RABBITMQ_PORT -p $RABBITMQ_ADMIN_PORT -d $RABBITMQ_IMAGE /usr/bin/start-rabbitmq.sh $RABBITMQ_PASSWORD)
    sleep 4
    # Rename persistent volume
    if [[ ! -f "$RABBIT_HOME/volume-$APP" ]]; then
        VOLUME_PATH=$(docker inspect $ID | grep /var/lib/docker/vfs/dir/ | awk '{print $2}' | sed -e's/"//g')
        if [[ -z $VOLUME_PATH ]]; then
            echo "Your docker version is too old, please update it"
            exit 1
        fi
        echo $VOLUME_PATH > "$RABBIT_HOME/volume-$APP"
    fi
    # Link to a potential existing app
    dokku rabbitmq:link $APP $APP
    echo
    echo "-----> Rabbitmq container created: $RABBITMQ_IMAGE"
    sleep 1
    dokku rabbitmq:info $APP
    ;;

  rabbitmq:delete)
    RABBITMQ_IMAGE=rabbitmq/$APP
    # Stop the container
    ID=$(docker ps -a | grep "$RABBITMQ_IMAGE":latest |  awk '{print $1}')
    if [[ ! -z $ID ]]; then
        docker kill $ID > /dev/null
        sleep 1
        docker rm $ID > /dev/null
        sleep 1
    fi
    # Remove image
    IMAGE=$(docker images | grep "$RABBITMQ_IMAGE " |  awk '{print $1}')
    if [[ ! -z $IMAGE ]]; then
        docker rmi $IMAGE > /dev/null
    fi
    # Remove container root password
    if [[ -f "$RABBIT_HOME/pwd-$APP" ]]; then
        rm -f "$RABBIT_HOME/pwd-$APP"
    fi
    # Remove persistent volume
    if [[ -f "$RABBIT_HOME/volume-$APP" ]]; then
        #TODO: fix access rights to be able to remove volume as dokku
        rm -rf $(cat $RABBIT_HOME/volume-$APP)
        rm -f "$RABBIT_HOME/volume-$APP"
    fi
    echo
    echo "-----> Rabbitmq container deleted: $RABBITMQ_IMAGE"
    ;;

  rabbitmq:info)
    RABBITMQ_IMAGE=rabbitmq/$APP
    ID=$(docker ps -a | grep "$RABBITMQ_IMAGE":latest |  awk '{print $1}')
    IP=$(docker inspect $ID | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
    PORT=$(docker port $ID $RABBITMQ_PORT | cut -d":" -f2)
    PORT_ADMIN=$(docker port $ID $RABBITMQ_ADMIN_PORT | cut -d":" -f2)
    #TODO: change it once solution for persistent links (urls) exist (dns?)
    DOCKER_GATEWAY=$(docker inspect $ID | grep Gateway | awk '{ print $2 }' | tr -d ',"')
    echo
    echo "       Host: $IP"
    echo "       Gateway (hardcoded): $DOCKER_GATEWAY"
    echo "       AMQP port: $RABBITMQ_PORT -> $PORT"
    echo "       ADMIN port: $RABBITMQ_ADMIN_PORT -> $PORT_ADMIN"
    echo "       User: 'admin'"
    echo "       Password: '$(cat $RABBIT_HOME/pwd-$APP)'"
    echo
    ;;

  rabbitmq:link)
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a container name"
            exit 1
        fi
        RABBITMQ_IMAGE="rabbitmq/$3"
        if [[ ! -f "$RABBIT_HOME/pwd-$3" ]]; then
            echo "Rabbitmq is not correctly initialized"
            exit 0
        fi
        ID=$(docker ps -a | grep "$RABBITMQ_IMAGE":latest |  awk '{print $1}')
        #IP=$(docker inspect $ID | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
        PORT=$(docker port $ID $RABBITMQ_PORT | cut -d":" -f2)
        #TODO: find solution for persistant links (dns?)
        DOCKER_GATEWAY=$(docker inspect $ID | grep Gateway | awk '{ print $2 }' | tr -d ',"')
        RABBITMQ_PASSWORD=$(cat "$RABBIT_HOME/pwd-$3")

        # Write BROKER_URL to app's ENV file using dokku command
        dokku config:set $APP "BROKER_URL=amqp://admin:$RABBITMQ_PASSWORD@$DOCKER_GATEWAY:$PORT//"
        echo
        echo "-----> $APP linked to $RABBITMQ_IMAGE container"
    fi
    ;;

  rabbitmq:logs)
    RABBITMQ_IMAGE=rabbitmq/$APP
    ID=$(docker ps -a | grep "$RABBITMQ_IMAGE" |  awk '{print $1}')
    docker logs $ID | tail -n 100
    ;;

  help)
    cat && cat<<EOF
    rabbitmq:create <app>           Create a Rabbitmq container
    rabbitmq:delete <app>           Delete specified Rabbitmq container
    rabbitmq:info <app>             Display container informations
    rabbitmq:link <app> <rabbit>    Link an app to a Rabbitmq container
    rabbitmq:logs <app>             Display last logs from Rabbitmq container
EOF
    ;;

esac
