#!/usr/bin/env bash

source "$(dirname $0)/vars"

APP="$1"; PORT="$2"; INT_PORT="$3"
[[ "$INT_PORT" != "" ]] || INT_PORT="$APP_PORT"
WILDCARD_SSL="$DOKKU_ROOT/ssl"
SSL="$DOKKU_ROOT/$APP/ssl"

if [[ "$PORT" == "" ]] || [[ -f "$DOKKU_ROOT/$APP/NO_VHOST" ]]; then
  rm -f "$DOKKU_ROOT/$APP/nginx.conf"
  pluginhook nginx-pre-reload $APP
  sudo /etc/init.d/nginx reload > /dev/null
  exit 0
fi

hostnames_for_app "$APP"

if [[ "$hostname" != "" ]]; then
  if [[ -f "$SSL/server.crt" ]] && [[ -f "$SSL/server.key" ]]; then
    SSL_INUSE="$SSL"
  elif  [[ -f "$WILDCARD_SSL/server.crt" ]] && [[ -f "$WILDCARD_SSL/server.key" ]] && [[ $hostname = `openssl x509 -in $WILDCARD_SSL/server.crt -noout -subject | tr '/' '\n' | grep CN= | cut -c4-` ]]; then
    SSL_INUSE="$WILDCARD_SSL"
  fi

  # ssl based nginx.conf
  if [[ -n "$SSL_INUSE" ]]; then
  cat<<EOF > $DOKKU_ROOT/$APP/nginx.conf
upstream $APP { server 127.0.0.1:$PORT; }
server {
  listen      [::]:80;
  listen      80;
  server_name ${hostnames[@]} ${redirect_hostnames[@]};
  return 301 https://$hostname\$request_uri;
}

server {
  listen      [::]:443;
  listen      443;
  server_name ${hostnames[@]};

  ssl on;
  ssl_certificate     $SSL_INUSE/server.crt;
  ssl_certificate_key $SSL_INUSE/server.key;
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:AES:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK;
  ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_session_timeout 5m;
  ssl_session_cache shared:SSL:50m;

  location    / {
    proxy_pass  http://$APP;
EOF

    for host in "${hostnames[@]}";
    do
      cat <<EOF >> $DOKKU_ROOT/$APP/nginx.conf
    proxy_redirect http://$host:$INT_PORT/ https://$host/;
    proxy_redirect https://$host:$INT_PORT/ https://$host/;
EOF
    done

cat<<EOF >> $DOKKU_ROOT/$APP/nginx.conf
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$http_host;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-For \$remote_addr;
    proxy_set_header X-Forwarded-Port \$server_port;
    proxy_set_header X-Request-Start \$msec;
  }
}
EOF

  echo "https://$hostname" > "$DOKKU_ROOT/$APP/URL"
else
# default nginx.conf
  cat<<EOF > $DOKKU_ROOT/$APP/nginx.conf
upstream $APP { server 127.0.0.1:$PORT; }
server {
  listen      [::]:80;
  listen      80;
  server_name ${hostnames[@]};
  location    / {
    proxy_pass  http://$APP;
EOF

    for host in "${hostnames[@]}";
    do
      cat <<EOF >> $DOKKU_ROOT/$APP/nginx.conf
    proxy_redirect http://$host:$INT_PORT/ http://$host/;
EOF
    done

cat<<EOF >> $DOKKU_ROOT/$APP/nginx.conf
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$http_host;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-For \$remote_addr;
    proxy_set_header X-Forwarded-Port \$server_port;
    proxy_set_header X-Request-Start \$msec;
  }
}
EOF

  if [[ "$redirect_hostnames" != "" ]]; then
    cat<<EOF >> $DOKKU_ROOT/$APP/nginx.conf
server {
  listen      [::]:80;
  listen      80;
  server_name ${redirect_hostnames[@]};
  return 302 http://$hostname\$request_uri;
}
EOF
  fi

  echo "http://$hostname" > "$DOKKU_ROOT/$APP/URL"
  fi
  pluginhook nginx-pre-reload $APP
  sudo /etc/init.d/nginx reload > /dev/null
fi
