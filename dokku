#!/usr/bin/env bash

export DOKKU_ROOT=${DOKKU_ROOT:="/home/dokku"}
export PLUGIN_PATH=${PLUGIN_PATH:="/var/lib/dokku-alt/plugins"}

if [[ $(id -un) != "dokku" && $1 != "plugins-install" ]]; then
  sudo -u dokku -H $0 "$@"
  exit
fi

# locale
export LANGUAGE=${LANGUAGE:-en_US.UTF-8}
export LANG=${LANG:-en_US.UTF-8}
export LC_ALL=${LC_ALL:-en_US.UTF-8}

source "$PLUGIN_PATH/dokku_common"

[[ -f $DOKKU_ROOT/dokkurc ]] && source $DOKKU_ROOT/dokkurc

if [[ "$1" == "" ]]; then
  dokku help
  exit
fi

case "$1" in
  receive)
    verify_app_name "$2"
    info "Cleaning up ..."
    flock -n "$DOKKU_ROOT/cleanup.lock" dokku cleanup || true
    info "Building $APP ..."
    cat | dokku build $APP
    info "Releasing $APP ..."
    dokku release $APP
    info "Deploying $APP ..."
    dokku deploy $APP
    info2 "Application deployed:"
    verbose "$(dokku url $APP)"
    echo
    ;;

  build)
    verify_app_name "$2"
    cat | docker run -i -a stdin progrium/buildstep /bin/bash \
                      -c "mkdir -p /app && tar -xC /app" | commit_image "$IMAGE_GENERIC:build"
    [[ -d "$CACHE_DIR" ]] || mkdir "$CACHE_DIR"
    pluginhook pre-build "$APP"
    DOCKER_ARGS="$(: | pluginhook docker-args "$APP" build)"
    docker run -i -a stdin -v "$CACHE_DIR":/cache \
                $DOCKER_ARGS \
                "$IMAGE_GENERIC:build" \
                /build/builder | attach_and_commit_image "$IMAGE_GENERIC:build"
    pluginhook post-build "$APP"
    ;;

  release)
    verify_app_name "$2"
    tag_image "$IMAGE_GENERIC:build" "$IMAGE_GENERIC:release"
    pluginhook pre-release "$APP"
    if [[ -f "$DOKKU_ROOT/$APP/ENV" ]]; then
      cat "$DOKKU_ROOT/$APP/ENV" | docker run -i -a stdin "$IMAGE_GENERIC:release" \
        /bin/bash -c "mkdir -p /app/.profile.d && cat > /app/.profile.d/app-env.sh" | commit_image "$IMAGE_GENERIC:release"
    fi
    pluginhook post-release "$APP"
    ;;

  deploy)
    verify_app_name "$2"
    tag_image "$IMAGE_GENERIC:release" "$IMAGE_GENERIC:latest"
    pluginhook pre-deploy "$APP"

    # kill the app when running
    stop_and_remove_container $APP_ALL_NAMES

    # start the app
    DOCKER_ARGS="$(: | pluginhook docker-args "$APP" web)"
    id=$(docker run -d -p "$APP_PORT" -e PORT="$APP_PORT" --name="$APP_NAME" $DOCKER_ARGS "$IMAGE_GENERIC:latest" /bin/bash -c "/start web")
    port=$(docker port $id 5000 | sed 's/0.0.0.0://')
    echo "http://$(< "$DOKKU_ROOT/HOSTNAME"):$port" > "$DOKKU_ROOT/$APP/URL"

    # finish deployment
    pluginhook post-deploy "$APP" "$port"

    # cleanup at the end
    sleep 2s
    remove_container $APP_ALL_NAMES
    flock -n "$DOKKU_ROOT/cleanup.lock" dokku cleanup &
    ;;

  cleanup)
    # delete all non-running container - it's not very wise
    # docker ps -a | grep 'Exit' |  awk '{print $1}' | xargs docker rm &> /dev/null || true
    # delete unused images
    docker images | grep '<none>' |  awk '{print $3}'  | xargs docker rmi &> /dev/null || true
    ;;

  plugins)
    ls -1 -d $PLUGIN_PATH/*/
    ;;

  plugins-install)
    [[ "$(id -un)" != "root" ]] && fail "Plugins install can be run only as root!"
    shift 1
    for script in $(ls -d $PLUGIN_PATH/*/install); do
      plugin="$(basename "$(dirname $script)")"
      echo "Installing $plugin..."
      : | $script "$@"
    done
    ;;

  # temporary hack for https://github.com/progrium/dokku/issues/82
  deploy:all)
    for app in $(ls -d $DOKKU_ROOT/*/); do
      APP="$(basename $app)"
      if [[ -f "$app/refs/heads/master" ]]; then
        dokku deploy "$APP"
      fi
    done
    ;;

  help)
    cat<<EOF | pluginhook commands help | sort | sed 's/\s\s\s*/|/2' | column -t -s '|'
    help             Print the list of commands
    plugins          Print active plugins
    plugins-install  Install active plugins
EOF
    ;;

  *:help)
    CATEGORY="$(echo "$1" | cut -d':' -f1):"
    dokku help | grep "^\s*$CATEGORY"
    ;;

  *)
    for script in $(ls -d $PLUGIN_PATH/*/commands); do
      $script "$@"
    done
    ;;

esac
